{
  description = "A very basic flake";
  inputs.haskellNix = {
    url = "github:input-output-hk/haskell.nix";
    inputs.nixpkgs.follows = "nixpkgs";
  };
  inputs.nixpkgs.follows = "haskellNix/nixpkgs-2105";
  inputs.flake-utils.url = "github:numtide/flake-utils";
  inputs.iohkNix = {
    url = "github:input-output-hk/iohk-nix";
    inputs.nixpkgs.follows = "nixpkgs";
  };
  outputs = { self, nixpkgs, flake-utils, haskellNix, iohkNix }:
    flake-utils.lib.eachSystem [ "x86_64-linux" ] (system:
    let
      inherit (flake-utils.lib) eachSystem mkApp flattenTree;
      overlays = [ haskellNix.overlay
        iohkNix.overlays.crypto
        (final: prev: {
          # This overlay adds our project to pkgs
          cardanoMqSyncProject =
            final.haskell-nix.project' {
              src = ./.;
              compiler-nix-name = "ghc8104";
              # This is used by `nix develop .` to open a shell for use with
              # `cabal`, `hlint` and `haskell-language-server`
              shell.tools = {
                cabal = {};
                hlint = {};
                haskell-language-server = {};
              };
              # Non-Haskell shell tools go here
              shell.buildInputs = with pkgs; [
                nixpkgs-fmt
              ];
              # This adds `js-unknown-ghcjs-cabal` to the shell.
              #shell.crossPlatform = p: [p.ghcjs];
            };
        })
      ];
      pkgs = import nixpkgs { inherit system overlays; inherit (haskellNix) config; };
      flake = pkgs.cardanoMqSyncProject.flake {
        # This adds support for `nix build .#js-unknown-ghcjs-cabal:hello:exe:hello`
        #crossPlatforms = p: [p.ghcjs];
      };
    in flake // {
      # Built by `nix build .`
      defaultPackage = flake.packages."cardano-mq-sync:exe:cardano-mq-sync";
      apps = {
        repl = mkApp {
          drv = pkgs.writeShellScriptBin "repl" ''
            confnix=$(mktemp)
            echo "builtins.getFlake (toString $(git rev-parse --show-toplevel))" >$confnix
            trap "rm $confnix" EXIT
            nix repl $confnix
        '';
        };
      };
    });
}
